// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User account model for authentication and profiles
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("chef") // "admin", "chef"
  status    String   @default("active") // "active", "inactive", "pending"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile information
  bio          String?
  website      String?
  socialLinks  Json? // {twitter, instagram, facebook, etc.}
  
  // Chef profile (one-to-one relationship)
  chef         Chef?
  
  // Relations
  recipes      Recipe[]
  sentInvites  Invitation[] @relation("InvitedBy")
  receivedInvite Invitation? @relation("InvitedUser")

  @@map("users")
}

// Chef invitation system
model Invitation {
  id          String   @id @default(cuid())
  email       String   @unique
  invitedBy   User     @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  invitedById String
  invitedUser User?    @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId String? @unique
  status      String   @default("pending") // "pending", "accepted", "expired", "revoked"
  token       String   @unique // Invitation token
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("invitations")
}

// Recipe categories
model Category {
  id          String   @id
  name        String
  description String
  emoji       String
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recipes Recipe[]

  @@map("categories")
}

// Main recipe model
model Recipe {
  id           String   @id
  title        String
  slug         String   @unique // URL-friendly permalink
  description  String
  categoryId   String
  difficulty   String   // 'easy' | 'medium' | 'hard'
  prepTime     Int      // in minutes
  cookTime     Int      // in minutes  
  totalTime    Int      // in minutes
  servings     Int
  rating       Float    @default(0)
  reviewCount  Int      @default(0)
  image        String?
  imageCredit  String?
  unsplashId   String?
  equipment    String? // JSON array of equipment items
  notes        String? // Additional notes and tips
  featured     Boolean  @default(false)
  heroFeatured Boolean  @default(false) // For homepage hero section
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  category     Category     @relation(fields: [categoryId], references: [id])
  chef         Chef         @relation(fields: [chefId], references: [id])
  chefId       String
  ingredients  Ingredient[]
  instructions Instruction[]
  tags         RecipeTag[]

  // Created by admin user
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  @@map("recipes")
}

// Chef information
model Chef {
  id        String   @id @default(cuid())
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relationship (one-to-one)
  userId    String? @unique
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Relations
  recipes Recipe[]

  @@map("chefs")
}

// Recipe ingredients
model Ingredient {
  id       String @id @default(cuid())
  recipeId String
  item     String
  amount   String
  order    Int    @default(0)

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

// Recipe instructions
model Instruction {
  id       String @id @default(cuid())
  recipeId String
  step     String
  order    Int

  // Relations  
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("instructions")
}

// Tags system
model Tag {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  recipes RecipeTag[]

  @@map("tags")
}

// Many-to-many relation between recipes and tags
model RecipeTag {
  recipeId String
  tagId    String

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([recipeId, tagId])
  @@map("recipe_tags")
}
