name: üöÄ Deploy to Digital Ocean

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    name: üöÄ Deploy to Digital Ocean
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîê Setup SSH
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        
        # Fix SSH key formatting - GitHub secrets lose line breaks
        echo "Formatting SSH private key from secret..."
        
        # Extract the base64 content between the markers
        KEY_CONTENT='${{ secrets.DEPLOY_SSH_KEY }}'
        echo "Raw key content length: $(echo "$KEY_CONTENT" | wc -c)"
        echo "Raw key first 100 chars: $(echo "$KEY_CONTENT" | head -c 100)"
        
        # Extract just the base64 content between BEGIN and END markers
        BASE64_CONTENT=$(echo "$KEY_CONTENT" | sed 's/.*-----BEGIN OPENSSH PRIVATE KEY-----//' | sed 's/-----END OPENSSH PRIVATE KEY-----.*//')
        echo "Extracted base64 length: $(echo "$BASE64_CONTENT" | wc -c)"
        echo "Base64 content sample: $(echo "$BASE64_CONTENT" | head -c 50)"
        
        # Create properly formatted private key with 64-char line breaks
        {
          echo "-----BEGIN OPENSSH PRIVATE KEY-----"
          echo "$BASE64_CONTENT" | fold -w 64
          echo "-----END OPENSSH PRIVATE KEY-----"
        } > ~/.ssh/deploy_key
        
        # Ensure proper line endings
        sed -i 's/\r$//' ~/.ssh/deploy_key
        
        # Set proper permissions
        chmod 600 ~/.ssh/deploy_key
        
        # Debug: check key format
        echo "SSH key format check:"
        head -1 ~/.ssh/deploy_key
        tail -1 ~/.ssh/deploy_key
        
        # Debug all secrets to identify naming issues
        echo "=== Available Secret Values ==="
        echo "DEPLOY_HOST: [${{ secrets.DEPLOY_HOST }}]"
        echo "DEPLOY_USER: [${{ secrets.DEPLOY_USER }}]" 
        echo "DEPLOY_PATH: [${{ secrets.DEPLOY_PATH }}]"
        echo "NEXTAUTH_URL: [${{ secrets.NEXTAUTH_URL }}]"
        echo "DATABASE_URL: [${{ secrets.DATABASE_URL }}]"
        echo "ADMIN_EMAIL: [${{ secrets.ADMIN_EMAIL }}]"
        echo "JWT_SECRET length: [$(echo '${{ secrets.JWT_SECRET }}' | wc -c)]"
        echo "DEPLOY_SSH_KEY starts with: [$(echo '${{ secrets.DEPLOY_SSH_KEY }}' | head -c 50)]"
        echo "================================"
        
        # Add host to known_hosts to avoid prompts
        HOST_IP="${{ secrets.DEPLOY_HOST }}"
        echo "Adding host $HOST_IP to known_hosts"
        ssh-keyscan -H "$HOST_IP" >> ~/.ssh/known_hosts || echo "ssh-keyscan failed, continuing anyway"
        
    - name: üîç Verify server connection
      run: |
        # Debug: Show what the SSH command will be
        USER="${{ secrets.DEPLOY_USER }}"
        HOST="${{ secrets.DEPLOY_HOST }}"
        echo "SSH connection attempt:"
        echo "User: [$USER]"
        echo "Host: [$HOST]"
        echo "Full command: ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $USER@$HOST"
        
        # Verify secrets are not empty
        if [ -z "$USER" ]; then
          echo "ERROR: DEPLOY_USER secret is empty or not set"
          exit 1
        fi
        if [ -z "$HOST" ]; then
          echo "ERROR: DEPLOY_HOST secret is empty or not set"
          exit 1
        fi
        
        # Attempt SSH connection
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "$USER@$HOST" "echo 'Connection successful'"
        
    - name: üì§ Deploy application
      run: |
        # Create deployment directory if it doesn't exist
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
        
        # Sync files to server (excluding sensitive files)
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude 'node_modules' \
          --exclude '.env*' \
          --exclude 'data/database/*.db' \
          --exclude 'data/uploads' \
          --exclude '.next' \
          ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/
          
    - name: üîß Setup environment and deploy
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Create environment file from secrets
          cat > .env.local << 'ENVEOF'
        DATABASE_URL="${{ secrets.DATABASE_URL }}"
        JWT_SECRET="${{ secrets.JWT_SECRET }}"
        ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"
        ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
        NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}"
        NODE_ENV="production"
        ENVEOF
          
          # Make scripts executable
          chmod +x *.sh
          
          # Run deployment
          ./deploy.sh
        EOF
        
    - name: üîç Verify deployment
      run: |
        # Wait for application to start
        sleep 30
        
        # Check if application is responding
        curl -f ${{ secrets.NEXTAUTH_URL }} || exit 1
        curl -f ${{ secrets.NEXTAUTH_URL }}/api/recipes || exit 1
        
        echo "‚úÖ Deployment successful!"
        
    - name: üìä Post-deployment cleanup
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Clean up old Docker images
          docker system prune -f
          
          # Create backup after successful deployment
          cd ${{ secrets.DEPLOY_PATH }}
          ./backup.sh
        EOF
        
    - name: üì¢ Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Chang Cookbook deployed successfully to ${{ secrets.NEXTAUTH_URL }}"
        else
          echo "‚ùå Deployment failed"
          exit 1
        fi