name: 🐳 Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/chang-cookbook

jobs:
  build-and-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔍 Debug image names
      run: |
        echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
        echo "Full image path: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"
        echo "Generated labels: ${{ steps.meta.outputs.labels }}"
          
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Debug and verify image
      run: |
        echo "Looking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Available images in registry:"
        
        # Try to list available images (might fail if no access)
        docker images | grep chang-cookbook || echo "No local chang-cookbook images"
        
        # Try both possible image names
        echo "Trying lowercase name..."
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && echo "✅ Lowercase image found!" || echo "❌ Lowercase image not found"
        
        echo "Trying original repository name..."
        docker manifest inspect ${{ env.REGISTRY }}/${{ github.repository }}:latest && echo "✅ Original name image found!" || echo "❌ Original name image not found"
        
        # For now, don't fail the job - just gather info
        echo "Continuing with scan regardless of image verification..."
        
    - name: 🔍 Run Trivy vulnerability scanner
      id: trivy-scan
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 🔍 Fallback Trivy scan with original name
      if: steps.trivy-scan.outcome == 'failure'
      id: trivy-fallback
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 🔍 Check if SARIF file was created
      id: check-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif-exists=true" >> $GITHUB_OUTPUT
          echo "✅ SARIF file created successfully"
        else
          echo "sarif-exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ No SARIF file created - scans may have failed"
        fi
        
    - name: 📊 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-sarif.outputs.sarif-exists == 'true'
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 📝 Security scan summary
      if: always()
      run: |
        echo "### 🔒 Security Scan Results"
        if [ "${{ steps.trivy-scan.outcome }}" = "success" ]; then
          echo "✅ Primary scan completed successfully"
        elif [ "${{ steps.trivy-fallback.outcome }}" = "success" ]; then
          echo "✅ Fallback scan completed successfully"
        else
          echo "⚠️ Security scans failed - this is non-blocking for deployment"
          echo "Common causes:"
          echo "- Code scanning not enabled in repository settings"
          echo "- Image name mismatch between build and scan jobs"
          echo "- Network connectivity issues with container registry"
        fi
        
  deploy-container:
    name: 🚀 Deploy Container to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: 🐳 Deploy new container
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Update docker-compose to use GitHub Container Registry image
          sed -i 's|build: \.|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|' docker-compose.yml
          
          # Restart with new image
          docker-compose down
          docker-compose up -d
          
          # Wait for health check
          sleep 30
          
          # Verify deployment
          curl -f http://localhost:3000/api/recipes || exit 1
        EOF
        
    - name: 🧹 Cleanup old images
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Remove old images (keep last 3)
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print $2}' | xargs -r docker rmi
          
          # Clean up unused resources
          docker system prune -f
        EOF