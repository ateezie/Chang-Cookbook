name: 🧪 CI - Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run TypeScript check
      run: npx tsc --noEmit
      
    - name: 🧹 Run ESLint
      run: npm run lint || echo "ESLint issues found but continuing..."
      continue-on-error: true
      
    - name: 🗄️ Setup test database
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
      run: |
        # Start PostgreSQL service
        sudo systemctl start postgresql
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
        sudo -u postgres createdb test_db
        npx prisma generate
        npx prisma db push
        
    - name: 🧪 Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests configured, skipping..."
        fi
        
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🗄️ Generate Prisma client
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
      run: npx prisma generate
      
    - name: 🏗️ Build Next.js application
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
        NODE_ENV: "production"
        NEXTAUTH_URL: "http://localhost:3000"
        JWT_SECRET: "test-jwt-secret"
      run: npm run build
      
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
        retention-days: 1
        
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Audit dependencies
      run: npm audit --audit-level=high
      
    - name: 🔒 Check for secrets
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Running TruffleHog scan for pull request..."
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem --only-verified /pwd
        else
          echo "Skipping TruffleHog scan for push events (no base/head diff available)"
        fi
      continue-on-error: true