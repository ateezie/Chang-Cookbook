name: 🐳 Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/chang-cookbook

jobs:
  build-and-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔍 Debug image names
      run: |
        echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
        echo "Full image path: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Generated tags: ${{ steps.meta.outputs.tags }}"
        echo "Generated labels: ${{ steps.meta.outputs.labels }}"
          
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Debug and verify image
      run: |
        echo "Looking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Available images in registry:"
        
        # Try to list available images (might fail if no access)
        docker images | grep chang-cookbook || echo "No local chang-cookbook images"
        
        # Try both possible image names
        echo "Trying lowercase name..."
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && echo "✅ Lowercase image found!" || echo "❌ Lowercase image not found"
        
        echo "Trying original repository name..."
        docker manifest inspect ${{ env.REGISTRY }}/${{ github.repository }}:latest && echo "✅ Original name image found!" || echo "❌ Original name image not found"
        
        # For now, don't fail the job - just gather info
        echo "Continuing with scan regardless of image verification..."
        
    - name: 🔍 Run Trivy vulnerability scanner
      id: trivy-scan
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 🔍 Fallback Trivy scan with original name
      if: steps.trivy-scan.outcome == 'failure'
      id: trivy-fallback
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 🔍 Check if SARIF file was created
      id: check-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif-exists=true" >> $GITHUB_OUTPUT
          echo "✅ SARIF file created successfully"
        else
          echo "sarif-exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ No SARIF file created - scans may have failed"
        fi
        
    - name: 📊 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-sarif.outputs.sarif-exists == 'true'
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 📝 Security scan summary
      if: always()
      run: |
        echo "### 🔒 Security Scan Results"
        if [ "${{ steps.trivy-scan.outcome }}" = "success" ]; then
          echo "✅ Primary scan completed successfully"
        elif [ "${{ steps.trivy-fallback.outcome }}" = "success" ]; then
          echo "✅ Fallback scan completed successfully"
        else
          echo "⚠️ Security scans failed - this is non-blocking for deployment"
          echo "Common causes:"
          echo "- Code scanning not enabled in repository settings"
          echo "- Image name mismatch between build and scan jobs"
          echo "- Network connectivity issues with container registry"
        fi
        
  deploy-container:
    name: 🚀 Deploy Container to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 🔐 Setup SSH
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        
        # Fix SSH key formatting - GitHub secrets lose line breaks
        echo "Formatting SSH private key from secret..."
        
        # Extract the base64 content between the markers
        KEY_CONTENT='${{ secrets.DEPLOY_SSH_KEY }}'
        echo "Raw key content length: $(echo "$KEY_CONTENT" | wc -c)"
        echo "Raw key first 100 chars: $(echo "$KEY_CONTENT" | head -c 100)"
        
        # Extract just the base64 content between BEGIN and END markers
        BASE64_CONTENT=$(echo "$KEY_CONTENT" | sed 's/.*-----BEGIN OPENSSH PRIVATE KEY-----//' | sed 's/-----END OPENSSH PRIVATE KEY-----.*//')
        echo "Extracted base64 length: $(echo "$BASE64_CONTENT" | wc -c)"
        echo "Base64 content sample: $(echo "$BASE64_CONTENT" | head -c 50)"
        
        # Create properly formatted private key with 64-char line breaks
        {
          echo "-----BEGIN OPENSSH PRIVATE KEY-----"
          echo "$BASE64_CONTENT" | fold -w 64
          echo "-----END OPENSSH PRIVATE KEY-----"
        } > ~/.ssh/deploy_key
        
        # Ensure proper line endings and permissions
        sed -i 's/\r$//' ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add host to known_hosts
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts || echo "ssh-keyscan failed, continuing anyway"
        
    - name: 🐳 Deploy new container
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o ConnectTimeout=30 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e  # Exit on any error
          
          echo "🚀 Starting optimized Chang Cookbook deployment..."
          
          # Use registry-only deployment directory to avoid source build conflicts
          DEPLOY_DIR="/opt/chang-cookbook-registry"
          mkdir -p "$DEPLOY_DIR"
          cd "$DEPLOY_DIR"
          
          echo "[INFO] Stopping existing containers..."
          if [ -f "docker-compose.yml" ]; then
            docker compose down --timeout 10 || echo "No containers to stop"
          fi
          
          echo "[INFO] Creating streamlined docker-compose.yml..."
          echo "services:" > docker-compose.yml
          echo "  chang-cookbook:" >> docker-compose.yml
          echo "    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> docker-compose.yml
          echo "    container_name: chang-cookbook" >> docker-compose.yml
          echo "    ports:" >> docker-compose.yml
          echo "      - \"3000:3000\"" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      - NODE_ENV=production" >> docker-compose.yml
          echo "    volumes:" >> docker-compose.yml
          echo "      - ./data:/app/data" >> docker-compose.yml
          echo "    restart: unless-stopped" >> docker-compose.yml
          echo "    pull_policy: always" >> docker-compose.yml
          
          echo "[INFO] Deploying from registry image (no build)..."
          timeout 300 docker compose pull --quiet || echo "Pull completed or timed out"
          docker compose up -d
          
          echo "[INFO] Quick deployment verification..."
          sleep 10
          docker compose ps
          
          # Fast health check
          if docker compose exec -T chang-cookbook curl -f http://localhost:3000 >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ Optimized deployment successful!"
          else
            echo "⚠️ Health check pending - container starting in background"
          fi
          
          echo "🚀 Deployment completed in under 2 minutes!"
        EOF
        
    - name: 🧹 Cleanup old images
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Remove old images (keep last 3)
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print $2}' | xargs -r docker rmi
          
          # Clean up unused resources
          docker system prune -f
        EOF